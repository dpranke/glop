// Floyd data values are a more human-friendly way to write JSON
// values: they require much less punctuation 
// with less punctuation and with comments. They are similar
// to JSON5 strings in this regard, but are not strictly Javascript
// compatible, they handle strings differently.
// 
// Here's an example of one such value:
//     {
//       a_flag: true
//       an_enum: red
//       an_int: 1
//       an_object: {
//         one: 1
//         two: 2
//       }  
//       a_list: [4 a b c d]
//       a_string: `
//           hello
//         world
//         `
//     }
//
// which is equivalent to the JSON value:
//
//     {
//       "a_flag": true,
//       "an_enum": "red",
//       "an_int": 1,
//       "an_object": {
//         "one": 1,
//         "two": 2
//       },
//       "a list" : [ 4, "a", "b", "c", "d" ],
//       "string": "  hello\nworld\n"
//     }  
//
// Floyd data values are similar to JSON5 values in that they drop some
// punctuation and allow for comments, but go even further that JSON5 does
// by dropping JavaScript compatibility.

{
  start = `grammar`

  rules = ` 
    grammar  = value end                          -> _1

    value    = 'null'                             -> null
             | 'true'                             -> true
             | 'false'                            -> false
             | number                             -> ['number', _1]
             | string                             -> ['string', _1]
             | object                             -> ['object', _1]
             | array                              -> ['array', _1]

    string   = base_string ('+' base_string)*     -> _1 + join(' ', _2)

    object   = ident? _ '{' members? '}'          -> _2 

    array    = ident? _ '[' elements? ']'         -> _2 

    elements = value (',' | ' ' element)* ','?    -> [_1] + _2

    members  = member ((',' | ' ') members)* ','? -> [_1] + _2

    member   = (string|ident) ':' value           -> [_1, _3]
  `

  // All strings are multi-line by default, and have post-parse
  // processing to automatically dedent the string. To get strings that
  // aren't dedented, use the '+' between strings: that will 
  // concatenate them at parse time.
  //   
  // For example:
  //
  //     '    hello
  //        world'
  //
  // is equivalent to both:
  //
  //     '  hello\nworld' 
  // 
  // and 
  // 
  //     '  hello\n' +
  //     'world'
  //
  tokens = `
    base_string  = ident? squote (~squote qchar)* squote  -> _3
                 | ident? dquote (~dquote qchar)* dquote  -> _3
                 | ident? bquote (~bquote qchar)* bquote  -> _3
                 | ident? long_quot -> _2

    squote       = '\''

    dquote       = '"'

    bquote       = '`'

    // These are Lua-style long quotes, like [==[hello]==]. They 
    // allow for quoting arbitrary blocks of text without need for escaping.
    // The number of '=' characters must be the same on both sides of the
    // string.
    long_quote   = '[' '=':x '[' (~(']' '='^{len(x)} ']') qchar )*
                   ']' '='^{len(x)} ']'

    qchar        =  bslash esc_char:c                   -> c
                 |  ~bslash anything:c                  -> c

    bslash       = '\u005C'

    squote       = '\u0027'

    dquote       = '\u0022'

    esc_char     = 'b'                                 -> '\u0008'
                 | 'f'                                 -> '\u000C'
                 | 'n'                                 -> '\u000A'
                 | 'r'                                 -> '\u000D'
                 | 't'                                 -> '\u0009'
                 | 'v'                                 -> '\u000B'
                 | squote                              -> '\u0027'
                 | dquote                              -> '\u0022'
                 | bslash                              -> '\u005C'
                 | ~('x'|'u'|digit) anything:c         -> c
                 | '0' ~digit                          -> '\u0000'
                 | hex_esc:c                           -> c
                 | unicode_esc:c                       -> c

    hex_esc      = 'x' hex^{2}                         -> xtou(_2)

    unicode_esc  = 'u' hex^{4}                         -> xtou(_2)
                 | 'U' hex^{8}                         -> xtou(_2)

    ident        = {ident_start (letter|digit)*}

    ident_start  = {(letter | '$' | '_')}

    letter       = 'a'..'z' | 'A'..'Z'

    number       = {sign? (dec_number | hex_number) ~id_start}
                 
    dec_number   = {(nat_number ('.' digit*)? exp?) | ('.' digit* exp? }

    nat_number   = '0'
                 | {'1'..'9' digit*}

    digit        = '0'..'9'

    exp          = {('e'|'E') ('+'|'-')? digit+}

    hex_number  = {('0x'|'0X') ('a'..'f' |'A'..'F' | digit)+}

    eol          = '\r\n' | '\r' | '\n'
  `

  comment = `   '//' (~(eol|end) anything)* (end|eol)
              | '/*' (~'*/' anything)* '*/'
  `

  whitespace = `' ' | '\t' | comment | eol)*`
}
