{
  start = `grammar`

  rules = ` 
    grammar  = value end                  -> _1

    value    = 'null'                     -> 'None'
             | 'true'                     -> 'True'
             | 'false'                    -> 'False'
             | object                     -> ['object', _1]
             | array                      -> ['array', _1]
             | string                     -> ['string', _1]
             | number                     -> ['number', _1]

    object   = '{' members? '}'           -> _2 

    array    = '[' elements? ']'          -> _2 

    elements = value (',' element)* ','?  -> [_1] + _2

    members  = member (',' members)* ','? -> [_1] + _2

    member   = (string|ident) ':' value   -> [_1, _3]
  `

  tokens = `
    string       = squote {(~squote qchar)*} squote  -> _2
                 | dquote  {(~dquote qchar)*} dquote -> _2

    squote       = '\''

    dquote       = '"'

    qchar        = '\''
                 | '\"'
                 | anything

    ident        = {ident_start (letter|digit)*}

    ident_start  = {(letter | '$' | '_')}

    letter       = 'a'..'z' | 'A'..'Z'

    number       = {sign? (dec_number | hex_number) ~id_start}
                 
    dec_number   = {(nat_number ('.' digit*)? exp?) | ('.' digit* exp? }

    nat_number   = '0'
                 | {'1'..'9' digit*}

    digit        = '0'..'9'

    exp          = {('e'|'E') ('+'|'-')? digit+}

    hex_number  = {('0x'|'0X') ('a'..'f' |'A'..'F' | digit)+}

    eol          = '\r\n' | '\r' | '\n'
  `

  comment = `   '//' (~(eol|end) anything)* (end|eol)
              | '/*' (~'*/' anything)* '*/'
  `

  whitespace = `' ' | '\t' | comment | eol)*`
}
